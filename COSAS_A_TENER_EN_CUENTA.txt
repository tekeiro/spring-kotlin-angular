
** Al arrancar el proyecto de Spring, no se queda corriendo en segundo plano (se inicia y se apaga al momento)
	Hay que modificar el build.gradle y cambiar la dependencia de Tomcat de runtime a compile
	

** Configurar en el proyecto de Angular para que las llamadas /api/* vayan al proyecto de Spring
	1. Crear un archivo proxy.conf.json en la raiz del proyecto Angular con el siguiente contenido
		{
		  "/api/*": {
			"target": "http://localhost:8086/",
			"secure": false,
			"logLevel": "debug"
		  }
		}
	 Tened en cuenta el puerto donde arranque el proyecto de Spring Boot.
    
	2. Modificar el archivo package.json que contiene los comandos a ejecutar
		Cambiar "scripts"."start" de "ng server" por "ng serve --proxy-config proxy.conf.json"
	  Esto le indica que al iniciar el servidor de Angular le pase el proxy en el archivo que hemos creado en el paso 1.
	  
	  
** Soporte de tipos de fechas Java 8 Time API. 
	1. Agregar las siguientes dependencias al proyecto Spring
		compile("com.fasterxml.jackson.module:jackson-module-parameter-names")
		compile("com.fasterxml.jackson.datatype:jackson-datatype-jdk8")
		compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")
	
	2. Es aconsejable en el proyecto Angular, agregar la libreria "moment" 
	para el tratamiento de fechas de manera facil en JS/Typescript.
		npm install --save moment
	
	Entonces, en los DTO podemos declarar las fechas usando los tipos de Java 8 Time API 
	  (LocalDateTime, LocalDate, ...)
	y podemos indicarle a Jackson que para deserializarlo le pasaremos una cadena desde JSON
	indicandole el formato con la siguiente anotacion
	   @JsonFormat (
		pattern= "<formato fecha aceptado por DateTimeFormatter>", 
		shape = <aqui se le dice en que formato viene de Json : JsonFormat.Shape.* >
	   )
	Sobre el atributo shape, pro ejemplo desde Json si la fecha nos viene como un string (lo habitual), ponemos
	   shape=JsonFormat.Shape.STRING
	   

** Hacer compatible el binding bidireccional entre Angular (una propiedad Date de un modelo)
 y un campo HTML input[type=date,datetime-local]
   Fuente: https://stackoverflow.com/questions/38175251/angular-2-date-input-not-binding-to-date-value
   En el template HTML:
     <input type="datetime-local" #myDate  [value]="model.dateField | date: 'yyyy-MM-dd\'T\'HH:mm'"
		(input)="model.dateField = parseDate(myDate.value)"  ... />
   No usariamos [(ngModel)] sino hariamos el binding bidireccional a mano por asi decirlo, luego
   necesitamos declarar el metodo parseDate(text: string): Date en el componente
       parseDate(text: string): Date {
			return moment(text, "YYYY-MM-DD'T'HH:mm").toDate();
	   }
	   
** Agregar estilos globales y javascript
	Se agregan en el script angular-cli.json en las secciones 'styles' y 'scripts' respectivamente.
	
	   
** Distribuir aplicacion Angular dentro del proyecto Backend
	Cambiar el script angular-cli.json el parametro 'outDir' y apuntar 
	con ruta relativa a una carpeta dentro de static dentro del proyecto Backend.
	No poner directamente la carpeta static porque machacará todo lo que hay dentro
	incluyendo otras carpetas que haya como css o js aunque no meta nada ahí.
	Ejemplo:
		"outDir": "../spring-angular-backend/src/main/resources/static",
	   